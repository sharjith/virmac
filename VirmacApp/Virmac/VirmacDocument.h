/***************************************************************************
  virmacdoc.h  -  description
  -------------------
begin                : Thu Dec  4 09:55:15 IST 2003
copyright            : (C) 2003 by Sharjith Nair
email                : sharjith_ssn@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef VIRMACDOC_H
#define VIRMACDOC_H

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif 

// include files for QT
#include <qobject.h>
#include <qstring.h>
#include <qlist.h>

//Geometry
#include "Geometry.h"
#include "GeomException.h"
#include "Point3D.h"
#include "Vector3D.h"
#include "Line3D.h"
#include "Plane.h"

#include "MMath.h"
//Graphics
#include "VGLObject.h"
#include "VGLAxisSystem.h"
#include "VGLTrihedron.h"
//#include "GLFont.h"
#include "BoundingBox.h"

//Display Context
#include "VGLDisplayContext.h"

#include "MillCutter.h"
#include "VToolPath.h"
#include "VToolTrail.h"
#include "VStLObject.h"

// forward declaration of the StLViewer classes
class VirmacViewer;
class VGLDisplayContext;

/**	VirmacDoc provides a document object for a document-view model.
 *
 * The VirmacDoc class provides a document object that can be used in conjunction with the classes
 * VirmacApp and VirmacView to create a document-view model for MDI (Multiple Document Interface)
 * Qt 2.1 applications based on QApplication and QMainWindow as main classes and QWorkspace as MDI manager widget.
 * Thereby, the document object is created by the VirmacApp instance (and kept in a document list) and contains
 * the document structure with the according methods for manipulating the document
 * data by VirmacView objects. Also, VirmacDoc contains the methods for serialization of the document data
 * from and to files.
 * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
 * @version KDevelop version 1.1 code generation
 */
class VirmacDocument : public QObject
{
    Q_OBJECT

    friend class VirmacViewer;

public:
    /** Constructor for the fileclass of the application */
    VirmacDocument();
    /** Destructor for the fileclass of the application */
    ~VirmacDocument();

    VGLDisplayContext* GetDisplayContext() const { return dContext; }

    /** adds a view to the document which represents the document contents. Usually this is your main view. */
    void addView(VirmacViewer *view);

    /** removes a view from the list of currently connected views */
    void removeView(VirmacViewer *view);

    /** gets called if a view is removed or added */
    void changedViewList();

    /** returns the first view instance */
    VirmacViewer* firstView();

    /** returns true, if the requested view is the last view of the document */
    bool isLastView();

    /** This method gets called when the user is about to close a frame window. It checks, if more than one view
     * is connected to the document (then the frame can be closed), if pFrame is the last view and the document is
     * modified, the user gets asked if he wants to save the document.
     */
    bool canCloseFrame(VirmacViewer* pFrame);

    /** sets the modified flag for the document after a modifying action on the view connected to the document.*/
    void setModified(bool _m=true){ modified=_m; }

    /** returns if the document is modified or not. Use this to determine if your document needs saving by the user on closing.*/
    bool isModified(){ return modified; }

    /** deletes the document's contents */
    void deleteContents();

    /** initializes the document generally */
    bool newDocument();

    /** closes the acutal document */
    void closeDocument();

    /** loads the document by filename and format and emits the updateViews() signal */
    bool openDocument(const QString &filename, const char *format=0);

    /** saves the document under filename and format.*/
    bool saveDocument(const QString &filename, const char *format=0);

    /** sets the path to the file connected with the document */
    void setPathName(const QString &name);

    /** returns the pathname of the current document file*/
    const QString& pathName() const;

    /** sets the filename of the document */
    void setTitle(const QString &title);

    /** returns the title of the document */
    const QString& title() const;

    bool readGCode(const QString& str);
    bool readStLFile(const QString& str);
    void HidePath(const bool& flag) { myPath->MakeHidden(flag); }
    void HideTrail(const bool& flag) { myTrail->MakeHidden(flag); }
    void HideTool(const bool& flag) { myCutter->MakeHidden(flag); }
    void HideModel(const bool& flag) { myStLObj->MakeHidden(flag); }
    int AnimFunction();
    void ShowPoints(const bool& flag);
    void ShowSelectedBloc(NCBlock& bloc);
    void EraseSelectedBloc();

    int GetCurrentBlock() const;
    void SetCurrentBlock(int value);

public slots:

    /** calls repaint() on all views connected to the document object and is called by the view by which the document has been changed.
     * As this view normally repaints itself, it is excluded from the paintEvent.
     */
    void updateAllViews(VirmacViewer *sender);

private:

    /** the modified flag of the current document */
    bool modified;

    QString m_title;
    QString m_filename;
    /** the list of the views currently connected to the document */
    QList<VirmacViewer*> *pViewList;


public:
    QString blocString;
    VGLDisplayContext* dContext;
    MillingCutter* myCutter;
    VToolPath* myPath;
    VToolTrail* myTrail;
    ListIteratorOfListOfNCBlock myPathIter;

    ListOfNCBlock* myBlocPointList;
    ListIteratorOfListOfNCBlock myBPListIter;
    ListOfNCBlock* mySelePointList;
    ListIteratorOfListOfNCBlock mySPListIter;

    VStLObject* myStLObj;

    bool m_bGCodeLoaded;
    bool m_bModelLoaded;
    bool m_bCheckIntersection;
    int myPointsPerFrame;
    int myTotalBlocks;
    int myCurrentBlock;
    double DX;
    double DY;
    double DZ;
    double CX;
    double CY;
    double CZ;
    double RX;
    double RY;
    double RZ;
    double XP;
    double YP;
    double ZP;
};

#endif // VIRMACDOC_H
