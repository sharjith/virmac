/***************************************************************************
  virmac.h  -  description
  -------------------
begin                : Thu Dec  4 09:55:15 IST 2003
copyright            : (C) 2003 by Sharjith Nair
email                : sharjith_ssn@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef VIRMAC_H
#define VIRMAC_H

// include files for QT
#include <QApplication>
#include <QMainWindow>
#include <QAction>
#include <QMdiArea>
#include <QMenuBar>
#include <QToolBar>
#include <QStatusBar>
#include <QProgressBar>
#include <QWhatsThis>
#include <QMenu>
#include <QShortcut>
#include <QToolButton>
#include <QMessageBox>
#include <QFileDialog>
#include <QPrinter>
#include <QString>
#include <QPixmap>
#include <QLabel>
#include <QHBoxLayout>
#include <QListWidget>
#include <QSlider>
#include <QLCDNumber>
#include <QSpinBox>
#include <QLineEdit>
#include <QRadioButton>
#include <QSplitter>
#include <QtWidgets>


//OpenGL
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#endif

#include "MMath.h"


// forward declaration of the Virmac classes
class VirmacDocument;
class VirmacViewer;

/**
 * This Class is the base class for your application. It sets up the main
 * window and providing a menubar, toolbar
 * and statusbar. For the main view, an instance of class VirmacView is
 * created which creates your view.
 *
 * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
 * @version KDevelop version 1.3 code generation
 */
class VirmacMainWin : public QMainWindow
{

    friend class VirmacDocument;
    friend class VirmacViewer;

    Q_OBJECT

public:
    /** construtor */
    VirmacMainWin();
    /** destructor */
    ~VirmacMainWin();

    VirmacViewer* getActiveView() const;

    /** opens a file specified by commandline option
    */
    void openDocumentFile(const QString& file);

    QMdiArea* getWorkspace() { return pWorkspace; }
    void setMessage(const QString&);
    void setPrompt(const QString&);
    void timerEvent(QTimerEvent*);

    static VirmacMainWin* getMainWindow();

    QHBoxLayout* hb;
    QLabel *cViewer;
    QDockWidget *mesgWinFrame;
    QDockWidget *promWinFrame;
    QListWidget *mesgBox;
    QListWidget *promBox;
    QProgressBar *progBar;
    int mesgCnt;
    int promCnt;
    int timerID;

    QProgressBar *getProgBar() const;

protected:
    /** overloaded for Message box on last window exit */
    bool queryExit();
    /** event filter to catch close events for MDI child windows and is installed in createClient() on every child window.
     * Closing a window calls the eventFilter first which removes the view from the connected documents' view list. If the
     * last view is going to be closed, the eventFilter() tests if the document is modified; if yes, it asks the user to
     * save the document. If the document title contains "Untitled", slotFileSaveAs() gets called to get a save name and path.
     */
    virtual bool eventFilter(QObject* object, QEvent* event);
    /** creates a new child window. The document that will be connected to it
     * has to be created before and the instances filled, with e.g. openDocument().
     * Then call createClient() to get a new MDI child window.
     * @see VirmacDoc#addView
     * @see VirmacDoc#openDocument
     * @param doc pointer to the document instance that the view will
     * be connected to.
     */
    void createClient(VirmacDocument* doc);

    QLabel* getBlockLabel() { return blockLabel; }

    virtual void closeEvent( QCloseEvent* ce );

private slots:

    /** generate a new document in the actual view */
    void slotFileNew();
    /** open a document */
    void slotFileOpen();
    /** read a g code file */
    void slotFileReadGCode();
    /** write a g code file */
    void slotFileWriteGCode();
    /** read a stl file*/
    void slotFileReadStL();
    /** close the actual file */
    void slotFileClose();
    /** exits the application */
    void slotFileQuit();

    /** Trim The G Code Before specified bloc */
    void slotEditTrimBefore();
    /** Trim The G Code After specified bloc */
    void slotEditTrimAfter();
    /** Open The G Code In An Editor*/
    void slotEditGCode();

    /** toggle the toolbar*/
    void slotViewToolBar(bool toggle);
    /** toggle the statusbar*/
    void slotViewStatusBar(bool toggle);

    /** creates a new view for the current document */
    void slotWindowNewWindow();
    /** shows an about dlg*/
    void slotHelpAbout();
    /** change the status message of the whole statusbar temporary */
    void slotStatusHelpMsg(const QString &text);
    /** gets called when the window menu is activated; recreates the window menu with all opened window titles. */
    void windowMenuAboutToShow();
    /** activates the MDI child widget when it gets selected from the window menu. */
    void windowMenuActivated( int id );


    //viewer slots
    void slotTopView();
    void slotBottomView();
    void slotFrontView();
    void slotBackView();
    void slotLeftView();
    void slotRightView();
    void slotAxoView();
    void slotMultiFour();
    void slotProjection();
    void slotFitall();
    void slotZoomwin();
    void slotReset();
    void slotAntial();
    void slotSnapshot();
    void slotBgColor();

    //anim slots
    void slotPlay();
    void slotPickPlay();
    void slotPlayStep();
    void slotRewind();
    void slotPause();
    void slotStop();
    void slotDeleteSirus();
    void slotDeleteModel();
    void slotSimulSettings();
    void slotToolLibrary();
    void slotRotaryAxis();
    void slotStartBlock();

    void slotPointsPerFrame(int value);

    //preferences
    void toolMenuATS(); //ATS => About To Show
    void trailMenuATS();
    void modelMenuATS();
    void gridMenuATS();
    void slotToolDisplayMode();
    void slotToolHide();
    void slotToolColor();
    void slotToggleTrail();
    void slotModelDisplayMode();
    void slotModelHide();
    void slotModelColor();
    void slotModelMaterial();
    void slotModelNormals();
    void slotToggleSirus();
    void slotColToolPath();
    void slotColFeedTrail();
    void slotColRapidTrail();
    void slotColG02Trail();
    void slotColG03Trail();
    void slotGridSettings();
    void slotColGrid();
    void slotToggleGrid();
    void slotToggleCircInt();
    void slotTransform();

    //analysis
    void slotPPIntersection(bool);
    void slotRoughStock();
    void slotWYSIWYC();

    //utilities
    void slotSearchBlock();
    void slotPickBlock();
    void slotMeasDist();
    void slotMeasAng();
    void slotSimulRep();


private:

    /** initializes all QActions of the application */
    void initActions();
    /** initMenuBar creates the menu_bar and inserts the menuitems */
    void initMenuBar();
    /** this creates the toolbars. Change the toobar look and add new toolbars in this
     * function */
    void initToolBar();
    /** setup the statusbar */
    void initStatusBar();
    /** setup the mainview*/
    void initView();

    /** file_menu contains all items of the menubar entry "File" */
    QMenu *pFileMenu;
    /** edit_menu contains all items of the menubar entry "Edit" */
    QMenu *pEditMenu;
    /** view_menu contains all items of the menubar entry "View" */
    QMenu *pViewMenu;

    QMenu *pSimulMenu;
    QMenu *pAnalysisMenu;
    QMenu *pPrefMenu;
    QMenu *pToolMenu;
    QMenu *pTrailMenu;
    QMenu *pModelMenu;
    QMenu *pColorMenu;
    QMenu *pGridMenu;
    QMenu *pUtilMenu;

    /** view_menu contains all items of the menubar entry "Help" */
    QMenu *pHelpMenu;
    /** the window menu */
    QMenu *pWindowMenu;

    QToolBar *fileToolbar;
    QToolBar *viewBar;
    QToolBar *utilBar;
    QToolBar *animBar;

    /** pWorkspace is the MDI frame widget that handles MDI child widgets. Inititalized in
     * initView()
     */
    QMdiArea *pWorkspace;
    /** the printer instance */
    QPrinter *printer;
    /** a counter that gets increased each time the user creates a new document with "File"->"New" */
    int untitledCount;
    /** a list of all open documents. If the last window of a document gets closed, the installed eventFilter
     * removes this document from the list. The document list is checked for modified documents when the user
     * is about to close the application. */
    QList<VirmacDocument*> *pDocList;

    QAction *fileNew;
    QAction *fileOpen;
    QAction *fileReadGCode;
    QAction *fileWriteGCode;
    QAction *fileReadStl;
    QAction *fileClose;
    QAction *fileQuit;

    QAction *editTrimBefore;
    QAction *editTrimAfter;
    QAction *editGCode;

    QAction *viewToolBar;
    QAction *viewStatusBar;

    QAction *analysisRoughStock;
    QAction *analysisPPInter;
    QAction *analysisWYSIWYC;

    QActionGroup *windowAction;
    QAction *windowNewWindow;
    QAction *windowTile;
    QAction *windowCascade;
    QAction *helpAboutApp;


    //Viewer Actions;
    QAction *viewTop;
    QAction *viewBottom;
    QAction *viewFront;
    QAction *viewBack;
    QAction *viewLeft;
    QAction *viewRight;
    QAction *viewAxo;
    QAction *viewMultiFour;
    QAction *viewProjection;
    QAction *viewFitall;
    QAction *viewZoomwin;
    QAction *viewReset;
    QAction *viewAntial;
    QAction *viewSnapshot;
    QAction *bgColor;

    //anim actions
    QAction *animPlay;
    QAction *animPickPlay;
    QAction *animPlayStep;
    QAction *animRewind;
    QAction *animPause;
    QAction *animStop;
    QAction *deleteSirus;
    QAction *deleteModel;
    QAction *simulSettings;
    QAction *toolLibrary;
    QAction *rotaryAxis;
    QAction *startBlock;
    //anim buttons
    QToolButton* pPlayButton;
    QToolButton* pPlayStepButton;
    QToolButton* pPickPlayButton;
    QToolButton* pRewindButton;
    QToolButton* pPauseButton;
    QToolButton* pStopButton;

    //preferences actions
    QAction *pToolDisplayMode;
    QAction *pToolHide;
    QAction *pToolColor;
    QAction *pToggleTrail;
    QAction *pModelDisplayMode;
    QAction *pModelHide;
    QAction *pModelColor;
    QAction *pModelMaterial;
    QAction *pModelNormals;
    QAction *pToggleSirus;
    QAction *pColToolPath;
    QAction *pColFeedTrail;
    QAction *pColRapidTrail;
    QAction *pColG02Trail;
    QAction *pColG03Trail;
    QAction *pGridSettings;
    QAction *pColGrid;
    QAction *pToggleGrid;
    QAction *pToggleCircInt;
    QAction *pTransform;

    //util actions
    QAction *pSearchBlock;
    QAction *pPickBlock;
    QAction *pMeasDist;
    QAction *pMeasAng;
    QAction *pSimulRep;

    bool bSplit;

    QSlider* pSlider;
    QLabel* blockLabel;
    QLCDNumber* pPointsPerFrame;
    QLabel* ppfLabel;
    QString blockStr;
};
#endif

